package storage

import (
	"fmt"
	"strings"
	"time"

	"github.com/Ananth-NQI/truckpe-backend/internal/models"
	"gorm.io/gorm"
)

// DatabaseStore implements Store interface using PostgreSQL
type DatabaseStore struct {
	db *gorm.DB
}

// NewDatabaseStore creates a new database storage
func NewDatabaseStore(db *gorm.DB) Store {
	return &DatabaseStore{db: db}
}

// Trucker operations
func (d *DatabaseStore) CreateTrucker(reg *models.TruckerRegistration) (*models.Trucker, error) {
	// Check if phone already exists
	var existing models.Trucker
	if err := d.db.Where("phone = ?", reg.Phone).First(&existing).Error; err == nil {
		return nil, fmt.Errorf("phone number already registered")
	}

	// Check if vehicle already exists
	if err := d.db.Where("vehicle_no = ?", reg.VehicleNo).First(&existing).Error; err == nil {
		return nil, fmt.Errorf("vehicle already registered")
	}

	trucker := &models.Trucker{
		Name:        reg.Name,
		Phone:       reg.Phone,
		VehicleNo:   reg.VehicleNo,
		VehicleType: reg.VehicleType,
		Capacity:    reg.Capacity,
		Verified:    false,
		Rating:      5.0, // Start with 5 stars
		TotalTrips:  0,
		Available:   true,
	}

	if err := d.db.Create(trucker).Error; err != nil {
		return nil, fmt.Errorf("failed to create trucker: %w", err)
	}

	return trucker, nil
}

func (d *DatabaseStore) GetTrucker(id string) (*models.Trucker, error) {
	var trucker models.Trucker

	// Check if it's a TruckerID (starts with "TR") or numeric ID
	if strings.HasPrefix(id, "TR") {
		// Search by TruckerID only
		if err := d.db.Where("trucker_id = ?", id).First(&trucker).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				return nil, fmt.Errorf("trucker not found")
			}
			return nil, fmt.Errorf("database error: %w", err)
		}
	} else {
		// Try to parse as numeric ID
		if err := d.db.Where("id = ?", id).First(&trucker).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				return nil, fmt.Errorf("trucker not found")
			}
			return nil, fmt.Errorf("database error: %w", err)
		}
	}

	return &trucker, nil
}

func (d *DatabaseStore) GetTruckerByPhone(phone string) (*models.Trucker, error) {
	var trucker models.Trucker
	if err := d.db.Where("phone = ?", phone).First(&trucker).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, fmt.Errorf("trucker not found")
		}
		return nil, fmt.Errorf("database error: %w", err)
	}
	return &trucker, nil
}

// Load operations
func (d *DatabaseStore) CreateLoad(load *models.Load) (*models.Load, error) {
	// LoadID will be auto-generated by BeforeCreate hook
	load.Status = "available"

	if err := d.db.Create(load).Error; err != nil {
		return nil, fmt.Errorf("failed to create load: %w", err)
	}

	return load, nil
}

func (d *DatabaseStore) GetLoad(id string) (*models.Load, error) {
	var load models.Load

	// Check if it's a LoadID (starts with "LD") or numeric ID
	if strings.HasPrefix(id, "LD") {
		// Search by LoadID only
		if err := d.db.Where("load_id = ?", id).First(&load).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				return nil, fmt.Errorf("load not found")
			}
			return nil, fmt.Errorf("database error: %w", err)
		}
	} else {
		// Try to parse as numeric ID
		if err := d.db.Where("id = ?", id).First(&load).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				return nil, fmt.Errorf("load not found")
			}
			return nil, fmt.Errorf("database error: %w", err)
		}
	}

	return &load, nil
}

func (d *DatabaseStore) GetAvailableLoads() ([]*models.Load, error) {
	var loads []*models.Load
	if err := d.db.Where("status = ?", "available").
		Order("created_at DESC").
		Find(&loads).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch loads: %w", err)
	}
	return loads, nil
}

func (d *DatabaseStore) SearchLoads(search *models.LoadSearch) ([]*models.Load, error) {
	query := d.db.Where("status = ?", "available")

	if search.FromCity != "" {
		// Use ILIKE for case-insensitive search in PostgreSQL
		query = query.Where("LOWER(from_city) = LOWER(?)", search.FromCity)
	}
	if search.ToCity != "" {
		query = query.Where("LOWER(to_city) = LOWER(?)", search.ToCity)
	}
	if search.VehicleType != "" {
		query = query.Where("LOWER(vehicle_type) LIKE LOWER(?)", "%"+search.VehicleType+"%")
	}
	if search.DateFrom != "" {
		if date, err := time.Parse("2006-01-02", search.DateFrom); err == nil {
			query = query.Where("loading_date >= ?", date)
		}
	}

	var loads []*models.Load
	if err := query.Order("created_at DESC").Find(&loads).Error; err != nil {
		return nil, fmt.Errorf("failed to search loads: %w", err)
	}
	return loads, nil
}

func (d *DatabaseStore) UpdateLoadStatus(id string, status string) error {
	var result *gorm.DB

	// Check if it's a LoadID (starts with "LD") or numeric ID
	if strings.HasPrefix(id, "LD") {
		result = d.db.Model(&models.Load{}).
			Where("load_id = ?", id).
			Update("status", status)
	} else {
		result = d.db.Model(&models.Load{}).
			Where("id = ?", id).
			Update("status", status)
	}

	if result.Error != nil {
		return fmt.Errorf("failed to update load status: %w", result.Error)
	}
	if result.RowsAffected == 0 {
		return fmt.Errorf("load not found")
	}
	return nil
}

// Booking operations
func (d *DatabaseStore) CreateBooking(loadID, truckerID string) (*models.Booking, error) {
	// Start transaction
	tx := d.db.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// Get load with FOR UPDATE lock to prevent concurrent bookings
	var load models.Load
	if strings.HasPrefix(loadID, "LD") {
		if err := tx.Set("gorm:query_option", "FOR UPDATE").Where("load_id = ?", loadID).First(&load).Error; err != nil {
			tx.Rollback()
			return nil, fmt.Errorf("load not found")
		}
	} else {
		if err := tx.Set("gorm:query_option", "FOR UPDATE").Where("id = ?", loadID).First(&load).Error; err != nil {
			tx.Rollback()
			return nil, fmt.Errorf("load not found")
		}
	}

	if load.Status != "available" {
		tx.Rollback()
		return nil, fmt.Errorf("load not available")
	}

	// Get trucker with proper ID handling
	var trucker models.Trucker
	if strings.HasPrefix(truckerID, "TR") {
		if err := tx.Where("trucker_id = ?", truckerID).First(&trucker).Error; err != nil {
			tx.Rollback()
			return nil, fmt.Errorf("trucker not found")
		}
	} else {
		if err := tx.Where("id = ?", truckerID).First(&trucker).Error; err != nil {
			tx.Rollback()
			return nil, fmt.Errorf("trucker not found")
		}
	}

	// Create booking using the actual model IDs (not the input parameters)
	now := time.Now()
	booking := &models.Booking{
		LoadID:        load.LoadID,       // Use the actual LoadID from the model
		TruckerID:     trucker.TruckerID, // Use the actual TruckerID from the model
		ShipperID:     load.ShipperID,
		AgreedPrice:   load.Price,
		Commission:    load.Price * 0.05, // 5% commission
		NetAmount:     load.Price * 0.95,
		Status:        models.BookingStatusConfirmed,
		PaymentStatus: models.PaymentStatusPending,
		ConfirmedAt:   &now,
	}

	// BookingID and OTP will be auto-generated by BeforeCreate hook
	if err := tx.Create(booking).Error; err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("failed to create booking: %w", err)
	}

	// Update load status
	if err := tx.Model(&load).Update("status", "booked").Error; err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("failed to update load status: %w", err)
	}

	// Update trucker availability
	if err := tx.Model(&trucker).Update("available", false).Error; err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("failed to update trucker availability: %w", err)
	}

	// Commit transaction
	if err := tx.Commit().Error; err != nil {
		return nil, fmt.Errorf("failed to commit transaction: %w", err)
	}

	return booking, nil
}

func (d *DatabaseStore) GetBooking(id string) (*models.Booking, error) {
	var booking models.Booking

	// Check if it's a BookingID (starts with "BK") or numeric ID
	if strings.HasPrefix(id, "BK") {
		// Search by BookingID only
		if err := d.db.Where("booking_id = ?", id).First(&booking).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				return nil, fmt.Errorf("booking not found")
			}
			return nil, fmt.Errorf("database error: %w", err)
		}
	} else {
		// Try to parse as numeric ID
		if err := d.db.Where("id = ?", id).First(&booking).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				return nil, fmt.Errorf("booking not found")
			}
			return nil, fmt.Errorf("database error: %w", err)
		}
	}

	return &booking, nil
}

func (d *DatabaseStore) GetBookingsByTrucker(truckerID string) ([]*models.Booking, error) {
	var bookings []*models.Booking
	if err := d.db.Where("trucker_id = ?", truckerID).
		Order("created_at DESC").
		Find(&bookings).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch bookings: %w", err)
	}
	return bookings, nil
}

func (d *DatabaseStore) GetBookingsByLoad(loadID string) ([]*models.Booking, error) {
	var bookings []*models.Booking
	if err := d.db.Where("load_id = ?", loadID).
		Order("created_at DESC").
		Find(&bookings).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch bookings: %w", err)
	}
	return bookings, nil
}

func (d *DatabaseStore) UpdateBookingStatus(id string, status string) error {
	var result *gorm.DB

	// Check if it's a BookingID (starts with "BK") or numeric ID
	if strings.HasPrefix(id, "BK") {
		result = d.db.Model(&models.Booking{}).
			Where("booking_id = ?", id).
			Update("status", status)
	} else {
		result = d.db.Model(&models.Booking{}).
			Where("id = ?", id).
			Update("status", status)
	}

	if result.Error != nil {
		return fmt.Errorf("failed to update booking status: %w", result.Error)
	}
	if result.RowsAffected == 0 {
		return fmt.Errorf("booking not found")
	}
	return nil
}

func (d *DatabaseStore) UpdateBooking(booking *models.Booking) error {
	// Use Save to update all fields including timestamps
	if err := d.db.Save(booking).Error; err != nil {
		return fmt.Errorf("failed to update booking: %w", err)
	}
	return nil
}

// Shipper operations
func (d *DatabaseStore) CreateShipper(shipper *models.Shipper) (*models.Shipper, error) {
	// Check if phone already exists
	var existing models.Shipper
	if err := d.db.Where("phone = ?", shipper.Phone).First(&existing).Error; err == nil {
		return nil, fmt.Errorf("phone number already registered")
	}

	// Check if GST already exists
	if err := d.db.Where("gst_number = ?", shipper.GSTNumber).First(&existing).Error; err == nil {
		return nil, fmt.Errorf("GST number already registered")
	}

	// ShipperID will be auto-generated by BeforeCreate hook
	if err := d.db.Create(shipper).Error; err != nil {
		return nil, fmt.Errorf("failed to create shipper: %w", err)
	}

	return shipper, nil
}

func (d *DatabaseStore) GetShipper(id string) (*models.Shipper, error) {
	var shipper models.Shipper

	// Check if it's a ShipperID (starts with "SH") or numeric ID
	if strings.HasPrefix(id, "SH") {
		if err := d.db.Where("shipper_id = ?", id).First(&shipper).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				return nil, fmt.Errorf("shipper not found")
			}
			return nil, fmt.Errorf("database error: %w", err)
		}
	} else {
		if err := d.db.Where("id = ?", id).First(&shipper).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				return nil, fmt.Errorf("shipper not found")
			}
			return nil, fmt.Errorf("database error: %w", err)
		}
	}

	return &shipper, nil
}

func (d *DatabaseStore) GetShipperByPhone(phone string) (*models.Shipper, error) {
	var shipper models.Shipper
	if err := d.db.Where("phone = ?", phone).First(&shipper).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, fmt.Errorf("shipper not found")
		}
		return nil, fmt.Errorf("database error: %w", err)
	}
	return &shipper, nil
}

func (d *DatabaseStore) GetShipperByGST(gst string) (*models.Shipper, error) {
	var shipper models.Shipper
	if err := d.db.Where("gst_number = ?", gst).First(&shipper).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, fmt.Errorf("shipper not found")
		}
		return nil, fmt.Errorf("database error: %w", err)
	}
	return &shipper, nil
}

func (d *DatabaseStore) GetLoadsByShipper(shipperID string) ([]*models.Load, error) {
	var loads []*models.Load
	if err := d.db.Where("shipper_id = ?", shipperID).
		Order("created_at DESC").
		Find(&loads).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch loads: %w", err)
	}
	return loads, nil
}

// OTP operations
func (d *DatabaseStore) CreateOTP(otp *models.OTP) (*models.OTP, error) {
	if err := d.db.Create(otp).Error; err != nil {
		return nil, fmt.Errorf("failed to create OTP: %w", err)
	}
	return otp, nil
}

func (d *DatabaseStore) GetActiveOTP(phone, code, purpose string) (*models.OTP, error) {
	var otp models.OTP
	err := d.db.Where("phone = ? AND code = ? AND purpose = ? AND is_used = ?",
		phone, code, purpose, false).First(&otp).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, fmt.Errorf("OTP not found or invalid")
		}
		return nil, fmt.Errorf("database error: %w", err)
	}
	return &otp, nil
}

func (d *DatabaseStore) UpdateOTP(otp *models.OTP) error {
	return d.db.Save(otp).Error
}

func (d *DatabaseStore) GetOTPByReference(referenceID, purpose string) (*models.OTP, error) {
	var otp models.OTP
	err := d.db.Where("reference_id = ? AND purpose = ? AND is_used = ?",
		referenceID, purpose, false).First(&otp).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, fmt.Errorf("OTP not found")
		}
		return nil, fmt.Errorf("database error: %w", err)
	}
	return &otp, nil
}

// GetAllTruckers returns all truckers
func (d *DatabaseStore) GetAllTruckers() ([]*models.Trucker, error) {
	var truckers []*models.Trucker
	err := d.db.Find(&truckers).Error
	return truckers, err
}

// GetAvailableTruckers returns all available truckers
func (d *DatabaseStore) GetAvailableTruckers() ([]*models.Trucker, error) {
	var truckers []*models.Trucker
	err := d.db.Where("available = ? AND is_suspended = ?", true, false).Find(&truckers).Error
	return truckers, err
}

// UpdateTrucker updates a trucker
func (d *DatabaseStore) UpdateTrucker(trucker *models.Trucker) error {
	return d.db.Save(trucker).Error
}

// GetTruckerByID returns a trucker by ID (same as GetTrucker but explicit)
func (d *DatabaseStore) GetTruckerByID(truckerID string) (*models.Trucker, error) {
	return d.GetTrucker(truckerID)
}

// GetShipperByID returns a shipper by ID (same as GetShipper but explicit)
func (d *DatabaseStore) GetShipperByID(shipperID string) (*models.Shipper, error) {
	return d.GetShipper(shipperID)
}

// UpdateShipper updates a shipper
func (d *DatabaseStore) UpdateShipper(shipper *models.Shipper) error {
	return d.db.Save(shipper).Error
}

// GetAllShippers returns all shippers
func (d *DatabaseStore) GetAllShippers() ([]*models.Shipper, error) {
	var shippers []*models.Shipper
	err := d.db.Find(&shippers).Error
	return shippers, err
}

// UpdateLoad updates a load
func (d *DatabaseStore) UpdateLoad(load *models.Load) error {
	return d.db.Save(load).Error
}

// GetLoadsByStatus returns loads by status
func (d *DatabaseStore) GetLoadsByStatus(status string) ([]*models.Load, error) {
	var loads []*models.Load
	err := d.db.Where("status = ?", status).Find(&loads).Error
	return loads, err
}

// GetExpiredLoads returns expired loads
func (d *DatabaseStore) GetExpiredLoads() ([]*models.Load, error) {
	return d.GetLoadsByStatus("expired")
}

// GetBookingsByStatus returns bookings by status
func (d *DatabaseStore) GetBookingsByStatus(status string) ([]*models.Booking, error) {
	var bookings []*models.Booking
	err := d.db.Where("status = ?", status).Find(&bookings).Error
	return bookings, err
}

// GetBookingsByPaymentStatus returns bookings by payment status
func (d *DatabaseStore) GetBookingsByPaymentStatus(paymentStatus string) ([]*models.Booking, error) {
	var bookings []*models.Booking
	err := d.db.Where("payment_status = ?", paymentStatus).Find(&bookings).Error
	return bookings, err
}

// GetActiveBookings returns all active bookings
func (d *DatabaseStore) GetActiveBookings() ([]*models.Booking, error) {
	var bookings []*models.Booking
	err := d.db.Where("status IN ?", []string{"confirmed", "trucker_assigned", "in_transit"}).Find(&bookings).Error
	return bookings, err
}

// GetCompletedBookingsInDateRange returns completed bookings in date range
func (d *DatabaseStore) GetCompletedBookingsInDateRange(startDate, endDate string) ([]*models.Booking, error) {
	var bookings []*models.Booking
	err := d.db.Where("status = ? AND created_at BETWEEN ? AND ?", "delivered", startDate, endDate).Find(&bookings).Error
	return bookings, err
}

// DeleteExpiredOTPs deletes expired OTPs
func (d *DatabaseStore) DeleteExpiredOTPs() error {
	return d.db.Where("expires_at < ?", time.Now()).Delete(&models.OTP{}).Error
}

// Analytics operations
func (d *DatabaseStore) GetTruckerStats(truckerID string) (*models.TruckerStats, error) {
	var stats models.TruckerStats
	err := d.db.Where("trucker_id = ?", truckerID).First(&stats).Error
	if err == gorm.ErrRecordNotFound {
		// Create new stats if not found
		stats = models.TruckerStats{
			TruckerID: truckerID,
		}
		// Calculate stats from bookings
		var bookings []*models.Booking
		d.db.Where("trucker_id = ? AND status = ?", truckerID, "delivered").Find(&bookings)
		stats.CompletedTrips = len(bookings)
		for _, b := range bookings {
			stats.TotalEarnings += b.NetAmount
		}
		d.db.Create(&stats)
	}
	return &stats, nil
}

func (d *DatabaseStore) GetShipperStats(shipperID string) (*models.ShipperStats, error) {
	var stats models.ShipperStats
	err := d.db.Where("shipper_id = ?", shipperID).First(&stats).Error
	if err == gorm.ErrRecordNotFound {
		// Create new stats if not found
		stats = models.ShipperStats{
			ShipperID: shipperID,
		}
		// Calculate stats from loads
		var loads []*models.Load
		d.db.Where("shipper_id = ?", shipperID).Find(&loads)
		stats.TotalLoads = len(loads)
		for _, l := range loads {
			if l.Status == "available" || l.Status == "booked" {
				stats.ActiveLoads++
			} else if l.Status == "delivered" || l.Status == "completed" {
				stats.CompletedLoads++
			}
		}
		d.db.Create(&stats)
	}
	return &stats, nil
}

func (d *DatabaseStore) GetTruckersWithExpiringDocuments(daysAhead int) ([]*models.Trucker, error) {
	var truckers []*models.Trucker
	expiryDate := time.Now().AddDate(0, 0, daysAhead)
	err := d.db.Where("document_expiry_date <= ? AND document_expiry_date > ?", expiryDate, time.Now()).Find(&truckers).Error
	return truckers, err
}

func (d *DatabaseStore) GetInactiveTruckers(daysSinceLastActive int) ([]*models.Trucker, error) {
	var truckers []*models.Trucker
	cutoffDate := time.Now().AddDate(0, 0, -daysSinceLastActive)
	err := d.db.Where("updated_at < ?", cutoffDate).Find(&truckers).Error
	return truckers, err
}

func (d *DatabaseStore) GetInactiveShippers(daysSinceLastActive int) ([]*models.Shipper, error) {
	var shippers []*models.Shipper
	cutoffDate := time.Now().AddDate(0, 0, -daysSinceLastActive)
	err := d.db.Where("updated_at < ?", cutoffDate).Find(&shippers).Error
	return shippers, err
}

// Support operations
func (d *DatabaseStore) CreateSupportTicket(ticket *models.SupportTicket) (*models.SupportTicket, error) {
	if err := d.db.Create(ticket).Error; err != nil {
		return nil, err
	}
	return ticket, nil
}

func (d *DatabaseStore) GetSupportTicket(ticketID string) (*models.SupportTicket, error) {
	var ticket models.SupportTicket
	err := d.db.Where("ticket_id = ?", ticketID).First(&ticket).Error
	if err != nil {
		return nil, err
	}
	return &ticket, nil
}

func (d *DatabaseStore) GetSupportTicketsByUser(userPhone string) ([]*models.SupportTicket, error) {
	var tickets []*models.SupportTicket
	err := d.db.Where("user_phone = ?", userPhone).Order("created_at DESC").Find(&tickets).Error
	return tickets, err
}

func (d *DatabaseStore) UpdateSupportTicket(ticket *models.SupportTicket) error {
	return d.db.Save(ticket).Error
}

// Admin operations
func (d *DatabaseStore) GetPendingVerifications() ([]*models.Verification, error) {
	var verifications []*models.Verification
	err := d.db.Where("status = ?", "pending").Find(&verifications).Error
	return verifications, err
}

func (d *DatabaseStore) UpdateVerificationStatus(verificationID string, status string, adminNotes string) error {
	now := time.Now()
	return d.db.Model(&models.Verification{}).Where("verification_id = ?", verificationID).Updates(map[string]interface{}{
		"status":      status,
		"admin_notes": adminNotes,
		"verified_at": &now,
	}).Error
}

func (d *DatabaseStore) SuspendAccount(userType string, userID string, reason string) error {
	if userType == "trucker" {
		return d.db.Model(&models.Trucker{}).Where("trucker_id = ?", userID).Update("is_suspended", true).Error
	} else if userType == "shipper" {
		return d.db.Model(&models.Shipper{}).Where("shipper_id = ?", userID).Update("active", false).Error
	}
	return fmt.Errorf("invalid user type")
}

func (d *DatabaseStore) ReactivateAccount(userType string, userID string) error {
	if userType == "trucker" {
		return d.db.Model(&models.Trucker{}).Where("trucker_id = ?", userID).Update("is_suspended", false).Error
	} else if userType == "shipper" {
		return d.db.Model(&models.Shipper{}).Where("shipper_id = ?", userID).Update("active", true).Error
	}
	return fmt.Errorf("invalid user type")
}

// Add this helper method
func (d *DatabaseStore) GetVerification(verificationID string) (*models.Verification, error) {
	var verification models.Verification
	err := d.db.Where("verification_id = ?", verificationID).First(&verification).Error
	if err != nil {
		return nil, err
	}
	return &verification, nil
}
